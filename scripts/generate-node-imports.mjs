import fs from 'fs';
import path from 'path';

const NODES_DIR = path.resolve('src/components/nodes');
const OUTPUT_FILE = path.resolve(NODES_DIR, 'autogen-imports.ts');

console.log('Scanning for node definitions...');

// Find all definition.ts files recursively.
const definitionFiles = fs.readdirSync(NODES_DIR, { recursive: true, withFileTypes: true })
    .filter(dirent => dirent.isFile() && dirent.name === 'definition.ts')
    .map(dirent => path.join(dirent.path, dirent.name));

// Generate the import statements.
// We use relative paths and the `.js` extension for ESM compatibility.
const imports = definitionFiles.map(file => {
    const relativePath = path.relative(NODES_DIR, file)
        .replace(/\\/g, '/') // Ensure forward slashes for imports
        .replace(/\.ts$/, '.js'); // Transpiled output will be .js
    return `import './${relativePath}';`;
});

const fileContent = `/*
 * THIS FILE IS AUTO-GENERATED BY scripts/generate-node-imports.mjs.
 * DO NOT EDIT THIS FILE MANUALLY.
 */

// Import all node definitions to trigger their registration side-effects.
${imports.join('\n')}

// Export the populated registrator for the rest of the application.
export { registrator } from './registrator.js';
`;

fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf-8');

console.log(`Generated node imports at ${OUTPUT_FILE} with ${definitionFiles.length} nodes.`);
